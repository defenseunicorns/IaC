# Attribution for a bunch of this goes to CloudPosse
# https://github.com/cloudposse/actions/blob/master/.github/workflows/test-command.yml

name: test
on:
  repository_dispatch:
    types: [test-command]
  push:
    branches:
      - main
      - feature/include-govcloud-in-tests

permissions:
  id-token: write
  contents: read

defaults:
  run:
    # We need -e -o pipefail for consistency with GitHub Actions' default behavior
    shell: bash -e -o pipefail {0}

jobs:
  # Parse the command, so we can decide which tests to run. Examples: "/test all", "/test validate", "/test e2e"
  # We can do as many of these as we want to get as granular as we want.
  parse:
    runs-on: ubuntu-latest
    outputs:
        run-ping: ${{ steps.parse.outputs.run-ping }}
        run-e2e: ${{ steps.parse.outputs.run-e2e }}
    steps:
      - name: Parse Args
        id: parse
        uses: ./.github/actions/parse

  # Do a simple ping/pong status update to validate things are working
  ping:
    runs-on: ubuntu-latest
    needs: parse
    if: needs.parse.outputs.run-ping == 'true'
    steps:


  # Run the E2E tests
  e2e:
    runs-on: ubuntu-latest
    needs: parse
    if: needs.parse.outputs.run-e2e == 'true'
    steps:
      # Update GitHub status for pending pipeline run
      - name: "Update GitHub Status for pending"
        if: github.event_name == 'repository_dispatch'
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
        env:
          REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
          REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_CONTEXT: "test / e2e (${{ github.event_name }})"
          GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

      - name: Create URL to the run output
        if: github.event_name == 'repository_dispatch'
        id: vars
        run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      # Will update the comment that triggered the /test comment and add the run-url
      - name: Update comment
        if: github.event_name == 'repository_dispatch'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            :robot: [View pipeline run][1]

            [1]: ${{ steps.vars.outputs.run-url }}

      # Checkout the code from GitHub Pull Request
      - name: "Checkout the code"
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}

      - name: Init gopath cache
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.cache/go"
          key: "gopath|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

      - name: Init gobuild cache
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.cache/go-build"
          key: "gobuild|${{ hashFiles('.tool-versions') }}|${{ hashFiles('go.sum') }}"

      - name: Init zarf cache
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.cache/.zarf-cache"
          key: "zarf|${{ hashFiles('.tool-versions') }}"

      - name: Init docker cache
        id: init-docker-cache
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.cache/docker"
          key: "docker|${{ hashFiles('Makefile') }}"

      - name: Docker save build harness
        if: steps.init-docker-cache.outputs.cache-hit != 'true'
        run: |
          make docker-save-build-harness

      - name: Load build harness
        run: |
          make docker-load-build-harness

      - name: Get Terraform version from .tool-versions
        id: get_tf_version
        run: echo "tf_version=$(grep 'terraform ' .tool-versions)" >> $GITHUB_OUTPUT

      - name: Init Terraform Cache
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
          key: "${{ runner.os }}-terraform-plugins|${{ steps.get_tf_version.outputs.tf_version }}|${{ hashFiles('examples/complete/providers.tf') }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-east-1
          # 21600 seconds == 6 hours
          role-duration-seconds: 21600

      - name: "Run E2E tests"
        env:
          REPO_URL: https://github.com/${{ github.repository }}.git
          GIT_BRANCH: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        run: |
          make test fix-cache-permissions

      # Update GitHub status for failing pipeline run
      - name: "Update GitHub Status for failure"
        if: ${{ failure() && github.event_name == 'repository_dispatch' }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
        env:
          REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
          REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_CONTEXT: "test / e2e (${{ github.event_name }})"
          GITHUB_DESCRIPTION: "run failed"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

      # Update GitHub status for successful pipeline run
      - name: "Update GitHub Status for success"
        if: github.event_name == 'repository_dispatch'
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
        env:
          REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
          REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_CONTEXT: "test / e2e (${{ github.event_name }})"
          GITHUB_DESCRIPTION: "run passed"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

      # Update GitHub status for cancelled pipeline run
      - name: "Update GitHub Status for cancelled"
        if: ${{ cancelled() && github.event_name == 'repository_dispatch' }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
        env:
          REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
          REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_CONTEXT: "test / e2e (${{ github.event_name }})"
          GITHUB_DESCRIPTION: "run cancelled"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
